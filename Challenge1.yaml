Challenge #1

A 3-tier environment is a common setup. Use a tool of your choosing/familiarity create these resources. 
Please remember we will not be judged on the outcome but more focusing on the approach, style and reproducibility.


#####################################################################

README NOTE:
Resolution Plan: I would like to build the 3 tier application on the AWS cloud.
                 Step1: Will setup the network infrastructure and necessary network resources and NACL access. 
                 Step2: Setup cognito to validate and authorize user and his request.
                 Step3: Setup Rest API gateway and necessary paths that will serve as entry points and connect them to load balancers.
                 Step4: As middle tier, setup the ECS cluster where containers will serve the work. and add ECS services to the load balancer target group
                 Step5: Have RDS setup and create necessary secrets and keys to connect the ecs service access the data within the database.

        Note1: not adding the Parameters section and the output section , to avoide increase code size 
              however, I would like to build the code modular. This code is just for the sake of test.

        Note2: Security groups and IAM roles, secrets definition and kms keys  not added and can be added to allow access accordingly.

        Note3: Have created this code from scratch and can reproduce the below on demand.
                      

######################################################################

#############################  Step1: begin    ##################################
AWSTemplateFormatVersion: "2010-09-09"
Description: ""
Resources:
    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "20.23.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: false
            InstanceTenancy: "default"
            Tags: 
              - Key: "Name"
                Value: "somevpc"
        
    EC2InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags: 
              - Key: "Name"
                Value: "igw"

    EC2VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref EC2InternetGateway
            VpcId: !GetAtt EC2Subnet.VpcId
    
    EC2Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet3.AvailabilityZone
            CidrBlock: "20.23.20.0/24"
            VpcId: !GetAtt EC2Subnet2.VpcId
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "snet-public"
        
    EC2Subnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet4.AvailabilityZone
            CidrBlock: "20.23.10.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false

    
    EC2Subnet3:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}b"
            CidrBlock: "20.23.200.0/24"
            VpcId: !GetAtt EC2Subnet2.VpcId
            MapPublicIpOnLaunch: false

    EC2Subnet4:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "20.23.100.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false


    EC2RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !GetAtt EC2Subnet.VpcId
            Tags: 
              - 
                Key: "environment"
                Value: "sandbox"
              - 
                Key: "Name"
                Value: "route-private"
    
    EC2Route2:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref EC2NatGateway
            RouteTableId: !Ref EC2RouteTable

    
    EC2RouteTable2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !GetAtt EC2Subnet.VpcId
            Tags: 
              - 
                Key: "Name"
                Value: "route-public"

    EC2Route:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref EC2InternetGateway
            RouteTableId: !Ref EC2RouteTable2
    
    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet4

    EC2SubnetRouteTableAssociation2:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet3

    EC2SubnetRouteTableAssociation3:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet2

    EC2SubnetRouteTableAssociation4:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet

    EC2NetworkAcl:
        Type: "AWS::EC2::NetworkAcl"
        Properties:
            VpcId: !GetAtt EC2Subnet.VpcId
            Tags: 
              - 
                Key: "Name"
                Value: "NACL-Public-Subnet."

    EC2NetworkAclEntry:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 100

    EC2NetworkAclEntry2:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 100
    
    EC2SubnetNetworkAclAssociation:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet3
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation2:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet4
            NetworkAclId: !Ref EC2NetworkAcl
    
    EC2EIP:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"
    
    EC2NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2Subnet2
            Tags: 
              - 
                Key: "environment"
                Value: "sandbox"
              - 
                Key: "Name"
                Value: "ngw-sandbox-useast1-002"
            AllocationId: !GetAtt EC2EIP.AllocationId
    
    EC2NetworkInterface5:
        Type: "AWS::EC2::NetworkInterface"
        DependsOn: EC2NatGateway
        Properties:
            Description: !Sub "Interface for NAT Gateway ${EC2NatGateway}"
            SubnetId: !Ref EC2Subnet2
            SourceDestCheck: false
#############################  Step1: End    ##################################
#############################  Step2: begin  ##################################
  # note few of the schema attributes deleted to reduce code  
    CognitoUserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            UserPoolName: "Test-user-pool"
            Policies: 
                PasswordPolicy: 
                    MinimumLength: 8
                    RequireUppercase: true
                    RequireLowercase: true
                    RequireNumbers: true
                    RequireSymbols: true
                    TemporaryPasswordValidityDays: 7
            LambdaConfig: {}
            Schema: 
              - 
                Name: "sub"
                AttributeDataType: "String"
                DeveloperOnlyAttribute: false
                Mutable: false
                Required: true
                StringAttributeConstraints: 
                    MinLength: "1"
                    MaxLength: "2048"
              - 
                Name: "name"
                AttributeDataType: "String"
                DeveloperOnlyAttribute: false
                Mutable: true
                Required: false
                StringAttributeConstraints: 
                    MinLength: "0"
                    MaxLength: "2048"
              - 
                Name: "given_name"
                AttributeDataType: "String"
                DeveloperOnlyAttribute: false
                Mutable: true
                Required: true
                StringAttributeConstraints: 
                    MinLength: "0"
                    MaxLength: "2048"
              - 
                Name: "family_name"
                AttributeDataType: "String"
                DeveloperOnlyAttribute: false
                Mutable: true
                Required: true
                StringAttributeConstraints: 
                    MinLength: "0"
                    MaxLength: "2048"
              - 
                Name: "middle_name"
                AttributeDataType: "String"
                DeveloperOnlyAttribute: false
                Mutable: true
                Required: false
                StringAttributeConstraints: 
                    MinLength: "0"
                    MaxLength: "2048"
              - 
                Name: "nickname"
                AttributeDataType: "String"
                DeveloperOnlyAttribute: false
                Mutable: true
                Required: false
                StringAttributeConstraints: 
                    MinLength: "0"
                    MaxLength: "2048"
              
              - 
                Name: "accounts"
                AttributeDataType: "String"
                DeveloperOnlyAttribute: false
                Mutable: true
                Required: false
                StringAttributeConstraints: 
                    MinLength: "1"
                    MaxLength: "2048"
            AutoVerifiedAttributes: 
              - "email"
              - "phone_number"
            AliasAttributes: 
              - "email"
              - "phone_number"
            SmsVerificationMessage: "Your verification code is {####}. "
            EmailVerificationMessage: "Your verification code is {####}. "
            EmailVerificationSubject: "Your verification code"
            SmsAuthenticationMessage: "Your verification code is {####}. "
            MfaConfiguration: "OPTIONAL"
            EmailConfiguration: 
                EmailSendingAccount: "COGNITO_DEFAULT"
            SmsConfiguration: 
                SnsCallerArn: !Sub "<Role arn needs to be provided>"
                ExternalId: "lsdlkasdglnfdgaasksdgas"
                SnsRegion: !Sub "${AWS::Region}"
            AdminCreateUserConfig: 
                AllowAdminCreateUserOnly: false
                InviteMessageTemplate: 
                    SMSMessage: "Your username is {username} and temporary password is {####}. "
                    EmailMessage: "Your username is {username} and temporary password is {####}. "
                    EmailSubject: "Your temporary password"
            UserPoolTags: 
                environment: "testenv"
            AccountRecoverySetting: 
                RecoveryMechanisms: 
                  - 
                    Priority: 1
                    Name: "verified_phone_number"
                  - 
                    Priority: 2
                    Name: "verified_email"
            UsernameConfiguration: 
                CaseSensitive: true
            VerificationMessageTemplate: 
                SmsMessage: "Your verification code is {####}. "
                EmailMessage: "Your verification code is {####}. "
                EmailSubject: "Your verification code"
                DefaultEmailOption: "CONFIRM_WITH_CODE"
    CognitoUserPoolClient:
        Type: "AWS::Cognito::UserPoolClient"
        Properties:
            UserPoolId: !Ref CognitoUserPool
            ClientName: "User-pool"
            RefreshTokenValidity: 30
            ReadAttributes: 
              - "address"
              - "birthdate"
              - "custom:accounts"
              - "email"
              - "email_verified"
              - "family_name"
              - "gender"
              - "given_name"
              - "locale"
              - "middle_name"
              - "name"
              - "nickname"
              - "phone_number"
              - "phone_number_verified"
              - "picture"
              - "preferred_username"
              - "profile"
              - "updated_at"
              - "website"
              - "zoneinfo"
            WriteAttributes: 
              - "address"
              - "birthdate"
              - "custom:accounts"
              - "email"
              - "family_name"
              - "gender"
              - "given_name"
              - "locale"
              - "middle_name"
              - "name"
              - "nickname"
              - "phone_number"
              - "picture"
              - "preferred_username"
              - "profile"
              - "updated_at"
              - "website"
              - "zoneinfo"
            ExplicitAuthFlows: 
              - "ALLOW_CUSTOM_AUTH"
              - "ALLOW_REFRESH_TOKEN_AUTH"
              - "ALLOW_USER_PASSWORD_AUTH"
              - "ALLOW_USER_SRP_AUTH"
            GenerateSecret: false
            PreventUserExistenceErrors: "LEGACY"
            AllowedOAuthFlowsUserPoolClient: false
            IdTokenValidity: 60
            AccessTokenValidity: 60
            TokenValidityUnits: 
                AccessToken: "minutes"
                IdToken: "minutes"
                RefreshToken: "days"
    #############################  Step2: End    ##################################
    #############################  Step3: begin    ################################
    
    #Note: API resource and methods can be created as many as you want, I have just added one.

    ApiGatewayVpcLink2:    # Select
        Type: "AWS::ApiGateway::VpcLink"
        Properties:
            Name: "fortest"
            TargetArns: 
              - !Ref ElasticLoadBalancingV2LoadBalancer2

    ApiGatewayAuthorizer:    
        Type: "AWS::ApiGateway::Authorizer"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "testauthorizer"
            Type: "COGNITO_USER_POOLS"
            ProviderARNs: 
              - !GetAtt CognitoUserPool.Arn
            AuthType: "cognito_user_pools"
            IdentitySource: "method.request.header.Authorization"
    
     ApiGatewayRestApi:  
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: "fm-sandbox-002"
            ApiKeySourceType: "HEADER"
            EndpointConfiguration: 
                Types: 
                  - "REGIONAL"
    
    ApiGatewayResource:  
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "profile"
            ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    ApiGatewayMethod:     
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource16
            HttpMethod: "PATCH"
            AuthorizationType: "COGNITO_USER_POOLS"
            AuthorizerId: !Ref ApiGatewayAuthorizer
            ApiKeyRequired: false
            MethodResponses: 
              - StatusCode: "200"
            Integration: 
                #CacheNamespace: "j7j79z"
                #ConnectionId: "f56ghf"
                ConnectionId: !Ref ApiGatewayVpcLink2
                ConnectionType: "VPC_LINK"
                IntegrationHttpMethod: "ANY"
                PassthroughBehavior: "WHEN_NO_MATCH"
                TimeoutInMillis: 29000
                Type: "HTTP_PROXY"
                Uri: !Sub "point to apln load balancer target"
            AuthorizationScopes: 
              - "aws.cognito.signin.user.admin"

#############################  Step3: End    ##################################
#############################  Step4: begin    ################################
#  have reduced the code here 
    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "applicationLb"
            Scheme: "internal"
            Type: "application"
            Subnets: 
              - !Ref EC2Subnet4
              - !Ref EC2Subnet3
            SecurityGroups: 
              - !Ref EC2SecurityGroup3
              - !Ref EC2SecurityGroup2
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    
    ElasticLoadBalancingV2LoadBalancer2:     
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        DependsOn:
            - ElasticLoadBalancingV2LoadBalancer
            #- OpenSearchServiceDomain
        Properties:
            Name: "network loadbalancer"
            Scheme: "internal"
            Type: "network"
            Subnets: 
              - !Ref EC2Subnet3  # "20.23.200.0/24"
              - !Ref EC2Subnet4  # "20.23.100.0/24"
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - Key: "access_logs.s3.enabled"
                Value: "false"
              - Key: "deletion_protection.enabled"
                Value: "false"
              - Key: "load_balancing.cross_zone.enabled"
                Value: "false"
    
    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup6
                Type: "forward"

      
    ElasticLoadBalancingV2Listener2:  
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer2
            Port: 80
            Protocol: "TCP"
            DefaultActions: 
             # I have deleted some portion here.
              - TargetGroupArn: !Ref <Referemce the target group to  which this listener should be pointing>
                Type: "forward"
      
    ElasticLoadBalancingV2ListenerRule:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "1"
            # I have deleted the portion here
            ListenerArn: !Ref ElasticLoadBalancingV2Listener
            Conditions: 
              - 
                Field: "path-pattern"
                Values: 
                  - "/events*"
            Actions: 
              - 
                Type: "forward"
                TargetGroupArn: !Ref <Referemce the target group to  which this listener rule be linked>
                ForwardConfig: 
                    TargetGroups: 
                      - 
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                        Weight: 1
                    TargetGroupStickinessConfig: 
                        Enabled: false

    ElasticLoadBalancingV2ListenerRule2:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "2"
            #Deleted some portion here.
            ListenerArn: !Ref ElasticLoadBalancingV2Listener
            Conditions: 
              - 
                Field: "path-pattern"
                Values: 
                  - "/user*"
            Actions: 
              - 
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                ForwardConfig: 
                    TargetGroups: 
                      - 
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                        Weight: 1
                    TargetGroupStickinessConfig: 
                        Enabled: false

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 80  # changed from 30 to 80
            HealthCheckPath: "/somepath/health"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 70  # changed to 70
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 2
            VpcId: !GetAtt EC2Subnet.VpcId
            Name: "testtgtgrp" #changed added -002
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"


    #############################  Step4: End    ##################################
    #############################  Step5: begin    ################################
    # code reduced.
    RDSDBInstance:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBInstanceIdentifier: "testdb"
            AllocatedStorage: 20  
            DBInstanceClass: "db.t2.small"
            Engine: "mysql"
            MasterUsername: "<someuser>"
            MasterUserPassword: "<somepassword>" 
            PreferredBackupWindow: "17:45-18:15"
            BackupRetentionPeriod: 7
            AvailabilityZone: !GetAtt EC2Subnet.AvailabilityZone
            MultiAZ: false
            EngineVersion: "8.0.27"
            AutoMinorVersionUpgrade: true
            LicenseModel: "general-public-license"
            PubliclyAccessible: false
            StorageType: "gp2"
            Port: 3306
            StorageEncrypted: false
            CopyTagsToSnapshot: true
            MonitoringInterval: 0
            EnableIAMDatabaseAuthentication: false
            EnablePerformanceInsights: false
            DeletionProtection: false
            DBSubnetGroupName: "name"
            VPCSecurityGroups: 
              - !Ref EC2SecurityGroupName
            MaxAllocatedStorage: 1000
            DBParameterGroupName: "default.mysql8.0"
            OptionGroupName: "default:mysql-8-0"
            CACertificateIdentifier: "rds-ca-2019"
    
    RDSDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "private"
            DBSubnetGroupName: "subnet group name"
            SubnetIds: 
              - !Ref EC2Subnet3
              - !Ref EC2Subnet4

    #############################  Step5: End    ##################################